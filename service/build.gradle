buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

group 'service'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    implementation "org.koin:koin-ktor:$koin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-json:$ktor_version"

    compile "org.litote.kmongo:kmongo-coroutine:$kmongo_version"
    
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-host-common:$ktor_version"
    compile "io.ktor:ktor-client-core:$ktor_version"
    compile "io.ktor:ktor-locations:$ktor_version"
    compile "io.ktor:ktor-auth:$ktor_version"
    compile "io.ktor:ktor-auth-jwt:$ktor_version"
    compile "io.ktor:ktor-client-gson:$ktor_version"
    compile "io.ktor:ktor-gson:$ktor_version"

    compile "org.mindrot:jbcrypt:0.4"

    testImplementation "org.koin:koin-test:$koin_version"
    testCompile "io.ktor:ktor-server-tests:$ktor_version"
}

shadowJar {
    baseName = 'service'
    classifier = null
    version = null
}

task buildClient(type: Exec) {
    workingDir '../client'
    commandLine 'yarn', 'install'
    commandLine 'yarn', 'build'
}


task bundleClient(type: Exec) {
    commandLine 'cp', '-r', '../client/dist/', './resources/static'
}

bundleClient.dependsOn buildClient
// build.dependsOn bundleClient